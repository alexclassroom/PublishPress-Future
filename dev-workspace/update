#!/usr/bin/env bash

# Make sure we are inside dev-workspace subdirectory. If not, enter it.
if [[ ! "$PWD" =~ dev-workspace$ ]]; then
    cd dev-workspace
fi

CACHE_NAME_LAST_UPDATE="cache/.last_image_update_check"
ONE_DAY_IN_SECONDS=86400
UPDATE_CHECK_INTERVAL=$ONE_DAY_IN_SECONDS

# Create empty cache files if not exists.
[[ -d cache ]] || mkdir -p cache
[[ -d cache/.npm/_cacache ]] || mkdir -p cache/.npm/_cacache
[[ -d cache/.npm/_logs ]] || mkdir -p cache/.npm/_logs
[[ -d cache/.composer/cache ]] || mkdir -p cache/.composer/cache
[[ -d cache/.oh-my-zsh/log ]] || mkdir -p cache/.oh-my-zsh/log
[[ -f cache/.zsh_history ]] || touch cache/.zsh_history
[[ -f cache/.bash_history ]] || touch cache/.bash_history
[[ -f cache/.composer/auth.json ]] || echo '{}' > cache/.composer/auth.json

is_online() {
    echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        echo 1
    else
        echo 0
    fi
}

pull_image() {
    docker compose -f docker/compose.yaml pull
}

run_update() {
    if [ "$(is_online)" -eq 1 ]; then
        # Check and update the image if needed, but do not display anything if there is any argument passed.
        if [[ $# -eq 0 ]]; then
            echo "Making sure the image is updated..."
            pull_image
        else
            pull_image > /dev/null 2>&1
        fi

        update_date_on_cache
    else
        if [[ $# -eq 0 ]]; then
            echo "Offline mode detected, ignoring image update."
        fi
    fi
}

update_date_on_cache() {
    date +%s > $CACHE_NAME_LAST_UPDATE
}

save_past_date_to_cache() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS uses BSD date
        date -v -7d +%s > $CACHE_NAME_LAST_UPDATE
    else
        # Ubuntu uses GNU date
        date --date="7 days ago" +%s > $CACHE_NAME_LAST_UPDATE
    fi
}

init_cache_if_not_exists() {
    if [[ ! -f $CACHE_NAME_LAST_UPDATE ]]; then
        save_past_date_to_cache
    fi
}

init_cache_if_not_exists
run_update
