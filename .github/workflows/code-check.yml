name: VIP Scans and other code checks
on:
  push:
    branches:
      - 'main'

  pull_request:
    branches:
      - '*'

  workflow_call:

  workflow_dispatch:
    inputs:
      tmate_enabled:
        type: boolean
        description: 'Enable "tmate" for debugging'
        required: false
        default: false
jobs:
  check:
    name: Check the code
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: publishpress/dev-workspace-terminal:future-free-4

    steps:
      - name: Setup tmate session for Debugging, if inputs.tmate_enabled is true
        uses: mxschmitt/action-tmate@v3
        if: ${{ inputs.tmate_enabled }}
        timeout-minutes: 10
        with:
          detached: true

      - name: Checkout code
        uses: actions/checkout@master

      - name: Cache Docker image
        id: cache-image
        uses: actions/cache@v3
        env:
          cache-name: image-cache
        with:
          path: ~/image-cache-terminal.tar
          # Adjust key to meet your cache time requirements e.g.
          # ${{ hashFiles(*) }} can be useful here to invalidate
          # cache on file changes
          key: image-cache-${{ hashFiles('dev-workspace/docker/Dockerfile') }}
          restore-keys: |
            image-cache-

      - if: steps.cache-image.outputs.cache-hit != 'true'
        name: Pull Docker image
        run: |
          docker pull $DOCKER_IMAGE
          docker save -o ~/image-cache-terminal.tar $DOCKER_IMAGE

      - if: steps.cache-image.outputs.cache-hit == 'true'
        name: Load Docker image from cache
        run: docker load -i ~/image-cache-terminal.tar

      - name: Run code checks
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/project \
            --workdir="/project" \
            $DOCKER_IMAGE \
            bash -c "composer validate && composer install --no-interaction --no-progress --prefer-dist --ignore-platform-reqs && composer check"
