{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment, Component} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n\n    class PostExpiratorSidebar extends Component {\n        constructor() {\n            super(...arguments);\n\n            this.state = {\n                categoriesList: [],\n                catIdVsName: [],\n            }\n\n            wp.data.subscribe(this.listenToPostSave.bind(this));\n            wp.hooks.addAction('after_save_post', 'publishpress-future', () => {\n                console.log('getExpirationEnabled', this.getExpirationEnabled());\n                this.saveCurrentPostData()\n            });\n        }\n\n        listenToPostSave() {\n            // Get the current post ID\n            const postId = this.getPostId();\n\n            const isSavingPost = this.getIsSavingPost();\n            const itemKey = 'ppfuture-expiration-' + postId + '-isSavingPost';\n\n            if (isSavingPost) {\n                sessionStorage.setItem(itemKey, '1');\n            }\n\n            if (!isSavingPost) {\n                let hasSavingRegistered = sessionStorage.getItem(itemKey) === '1';\n\n                if (hasSavingRegistered) {\n                    sessionStorage.removeItem(itemKey);\n                    wp.hooks.doAction('after_save_post', 'publishpress-future');\n                }\n            }\n        }\n\n        getPostType() {\n            return wp.data.select('core/editor').getCurrentPostType();\n        }\n\n        getPostId() {\n            return wp.data.select('core/editor').getCurrentPostId();\n        }\n\n        getIsSavingPost() {\n            return wp.data.select('core/editor').isSavingPost() || wp.data.select('core/editor').isAutosavingPost();\n        }\n\n        editPostAttribute(name, value) {\n            let attribute = {};\n            attribute[name] = value;\n\n            wp.data.dispatch('core/editor').editPost(attribute);\n        }\n\n        getEditedPostAttribute(name) {\n            return wp.data.select(\"core/editor\").getEditedPostAttribute(name);\n        }\n\n        fetchExpirationDataFromApi() {\n            return wp.apiFetch({path: 'publishpress-future/v1/post-expiration/' + this.getPostId()}).then((data) => {\n                this.editPostAttribute('expirationEnabled', data.enabled);\n                this.editPostAttribute('expirationAction', data.expireType);\n                this.editPostAttribute('expirationDate', data.date);\n                this.editPostAttribute('expirationTerms', data.category);\n                this.editPostAttribute('expirationTaxonomy', data.categoryTaxonomy);\n\n                this.setState({\n                    expirationEnabled: data.enabled,\n                    expirationAction: data.expireType,\n                    expirationDate: data.date,\n                    expirationTerms: data.category,\n                    expirationTaxonomy: data.categoryTaxonomy\n                });\n\n                console.log('API return', data);\n            });\n        }\n\n        saveCurrentPostData() {\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms} = this.state;\n            let data;\n\n            console.log(this.state);\n\n            if (!expirationEnabled) {\n                data = {'enabled': false, 'date': 0, 'action': '', 'terms': []};\n            } else {\n                data = {\n                    enabled: expirationEnabled,\n                    date: expirationDate,\n                    action: expirationAction,\n                    terms: expirationTerms,\n                };\n            }\n\n            wp.apiFetch({\n                path: 'publishpress-future/v1/post-expiration/' + this.getPostId(),\n                method: 'POST',\n                data: data,\n            }).then((data) => {\n                console.log('Future action data saved.');\n                console.log(data);\n            });\n        }\n\n        componentWillMount() {\n            this.fetchExpirationDataFromApi().then(this.initialize.bind(this));\n        }\n\n        initialize() {\n            const postType = this.getPostType();\n\n            const expirationEnabled = this.getExpirationEnabled();\n            const expirationAction = this.getExpirationAction();\n            const expirationTerms = this.getExpirationTerms();\n            const expirationDate = this.getExpirationDate();\n            const expirationTaxonomy = this.getExpirationTaxonomy();\n\n            console.log('Initialized', {\n                enabled: expirationEnabled,\n                date: expirationDate,\n                expirationAction: expirationAction,\n                categories: expirationTerms,\n                taxonomy: expirationTaxonomy,\n            });\n\n            let categoriesList = [];\n            let catIdVsName = [];\n\n            if ((!expirationTaxonomy && postType === 'post') || expirationTaxonomy === 'category') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        categoriesList[cat.name] = cat;\n                        catIdVsName[cat.id] = cat.name;\n                    });\n                    this.setState({\n                        categoriesList: categoriesList,\n                        catIdVsName: catIdVsName,\n                        taxonomy: config.strings.category\n                    });\n                });\n            } else {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs(`wp/v2/taxonomies/${expirationTaxonomy}`, {context: 'edit'}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    wp.apiFetch({\n                        path: wp.url.addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit'}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            categoriesList[decodeEntities(term.name)] = term;\n                            catIdVsName[term.id] = decodeEntities(term.name);\n                        });\n                        this.setState({\n                            categoriesList: categoriesList,\n                            catIdVsName: catIdVsName,\n                            taxonomy: decodeEntities(taxAttributes.name)\n                        });\n                    });\n                });\n            }\n        }\n\n        componentDidUpdate() {\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms, attribute} = this.state;\n            \n            switch (attribute) {\n                case 'enabled':\n                    this.editPostAttribute('expirationEnabled', expirationEnabled);\n                    break;\n\n                case 'date':\n                    this.editPostAttribute('expirationDate', expirationDate);\n                    break;\n\n                case 'action':\n                    this.editPostAttribute('expirationAction', expirationAction);\n                    if (!expirationAction.includes('category')) {\n                        this.editPostAttribute('expirationTerms', []);\n                    }\n                    break;\n                case 'category':\n                    this.editPostAttribute('expirationTerms', expirationTerms);\n                    break;\n            }\n        }\n\n        getExpirationEnabled() {\n            return this.getEditedPostAttribute('expirationEnabled') == true;\n        }\n\n        getExpirationDate() {\n            let storedDate = parseInt(this.getEditedPostAttribute('expirationDate'));\n\n            if (! storedDate) {\n                if (config.default_date) {\n                    storedDate = parseInt(config.default_date);\n                } else {\n                    storedDate = new Date().getTime();\n                }\n            }\n\n            let date = new Date();\n            // let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n            // let wpTimezoneOffset = config.timezone_offset * 60;\n\n            // date.setTime((storedDate + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            date.setTime(storedDate * 1000);\n\n            return date.getTime()/1000;\n        }\n\n        // what action to take on expiration\n        getExpirationAction() {\n            let expirationAction = this.getEditedPostAttribute('expirationAction');\n\n            if (expirationAction) {\n                return expirationAction;\n            }\n\n            if (config && config.defaults && config.defaults.expireType) {\n                return config.defaults.expireType;\n            }\n\n            return 'draft';\n        }\n\n        arrayIsEmpty(obj) {\n            return !obj || obj.length === 0 || obj[0] === '';\n        }\n\n        // what categories to add/remove/replace\n        getExpirationTerms() {\n            let categories = this.getEditedPostAttribute('expirationTerms', true);\n\n            let defaultCategories = config.defaults.terms ? config.defaults.terms.split(',') : [];\n\n            if (this.arrayIsEmpty(categories)) {\n                return defaultCategories;\n            }\n\n            if (categories && typeof categories !== 'undefined' && typeof categories !== 'object') {\n                return [categories];\n            }\n\n            return categories;\n        }\n\n        getExpirationTaxonomy() {\n            let taxonomy = this.getEditedPostAttribute('expirationTaxonomy');\n\n            if (taxonomy) {\n                return taxonomy;\n            }\n\n            if (config && config.defaults && config.defaults.taxonomy) {\n                return config.defaults.taxonomy;\n            }\n\n            return 'category';\n        }\n\n        // fired for the autocomplete\n        selectCategories(tokens) {\n            const {categoriesList, catIdVsName} = this.state;\n\n            var hasNoSuggestion = tokens.some(function (token) {\n                return typeof token === 'string' && !categoriesList[token];\n            });\n\n            if (hasNoSuggestion) {\n                return;\n            }\n\n            var categories = tokens.map(function (token) {\n                return typeof token === 'string' ? categoriesList[token] : token;\n            })\n\n            return categories.map((cat) => cat.id);\n        }\n\n        onChangeEnabled(value) {\n            this.setState({expirationEnabled: value, attribute: 'enabled'})\n            this.editPostAttribute('expirationEnabled', value);\n            console.log(value);\n        }\n\n        onChangeDate(value) {\n            const date = new Date(value).getTime()/1000;\n            this.setState({expirationDate: date, attribute: 'date'});\n            this.editPostAttribute('expirationDate', date);\n            console.log('New date', date, new Date(date * 1000));\n            console.log('Getdate', this.getExpirationDate());\n        }\n\n        onChangeAction(value) {\n            this.setState({expirationAction: value, attribute: 'action'})\n            this.editPostAttribute('expirationAction', value);\n        }\n\n        onChangeTerms(value) {\n            this.setState({\n                expirationTerms: this.selectCategories(value),\n                attribute: 'category'\n            });\n            this.editPostAttribute('expirationTerms', value);\n        }\n\n        render() {\n            const {categoriesList, catIdVsName} = this.state;\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms, expirationTaxonomy} = this.state;\n\n            let selectedCats = expirationTerms && compact(expirationTerms.map((id) => catIdVsName[id] || false));\n            if (typeof selectedCats === 'string') {\n                selectedCats = [];\n            }\n\n            return (\n                <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                            initialOpen={expirationEnabled} className={'post-expirator-panel'}>\n                    <PanelRow>\n                        <CheckboxControl\n                            label={config.strings.enablePostExpiration}\n                            checked={expirationEnabled}\n                            onChange={this.onChangeEnabled.bind(this)}\n                        />\n                    </PanelRow>\n                    {expirationEnabled && (\n                        <Fragment>\n                            <PanelRow>\n                                <DateTimePicker\n                                    currentDate={expirationDate*1000}\n                                    onChange={this.onChangeDate.bind(this)}\n                                    is12Hour={config.is_12_hours}\n                                />\n                            </PanelRow>\n                            <SelectControl\n                                label={config.strings.howToExpire}\n                                value={expirationAction}\n                                options={config.actions_options}\n                                onChange={this.onChangeAction.bind(this)}\n                            />\n                            {expirationAction.includes('category') &&\n                                (\n                                    (isEmpty(keys(categoriesList)) && (\n                                        <Fragment>\n                                            {config.strings.loading + ` (${expirationTaxonomy})`}\n                                            <Spinner/>\n                                        </Fragment>\n                                    ))\n                                    ||\n                                    (\n                                        <FormTokenField\n                                            label={config.strings.expirationCategories + ` (${expirationTaxonomy})`}\n                                            value={selectedCats}\n                                            suggestions={Object.keys(categoriesList)}\n                                            onChange={this.onChangeTerms.bind(this)}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )}\n                        </Fragment>\n                    )}\n                </PluginDocumentSettingPanel>\n            );\n        }\n    }\n\n    registerPlugin('postexpirator-sidebar', {\n        render: PostExpiratorSidebar\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","PluginDocumentSettingPanel","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","Component","decodeEntities","isEmpty","keys","compact","window","postExpiratorPanelConfig","plugins","editPost","components","element","htmlEntities","lodash","render","arguments","state","categoriesList","catIdVsName","data","subscribe","listenToPostSave","bind","hooks","addAction","console","log","getExpirationEnabled","saveCurrentPostData","postId","this","getPostId","isSavingPost","getIsSavingPost","itemKey","sessionStorage","setItem","getItem","removeItem","doAction","select","getCurrentPostType","getCurrentPostId","isAutosavingPost","name","value","attribute","dispatch","getEditedPostAttribute","apiFetch","path","then","editPostAttribute","enabled","expireType","date","category","categoryTaxonomy","setState","expirationEnabled","expirationAction","expirationDate","expirationTerms","expirationTaxonomy","action","terms","method","fetchExpirationDataFromApi","initialize","postType","getPostType","getExpirationAction","getExpirationTerms","getExpirationDate","getExpirationTaxonomy","categories","taxonomy","url","addQueryArgs","per_page","list","forEach","cat","id","strings","context","taxAttributes","rest_base","term","includes","storedDate","parseInt","default_date","Date","getTime","setTime","defaults","obj","length","defaultCategories","split","arrayIsEmpty","tokens","some","token","map","selectCategories","selectedCats","title","postExpirator","icon","initialOpen","className","label","enablePostExpiration","checked","onChange","onChangeEnabled","currentDate","onChangeDate","is12Hour","is_12_hours","howToExpire","options","actions_options","onChangeAction","loading","expirationCategories","suggestions","Object","onChangeTerms","maxSuggestions"],"sourceRoot":""}