{"version":3,"file":"bulk-edit.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/bulk-edit.jsx","webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/DateTimePicker.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/ToggleCalendarDatePicker.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/external var \"publishpressFutureBulkEditConfig\"","webpack://post-expirator/external var \"window\"","webpack://post-expirator/external var \"wp.data\"","webpack://post-expirator/external var \"wp.element\"","webpack://post-expirator/webpack/bootstrap"],"sourcesContent":["import { FutureActionPanelBulkEdit } from './components';\nimport { createStore } from './data';\nimport { createRoot } from '@wp/element';\nimport { select, dispatch } from '@wp/data';\nimport { inlineEditPost } from \"@window\";\nimport {\n    postTypeDefaultConfig,\n    defaultDate,\n    postType,\n    isNewPost,\n    actionsSelectOptions,\n    is12Hour,\n    startOfWeek,\n    strings,\n    taxonomyName,\n    nonce\n} from \"@config/bulk-edit\";\n\nconst storeName = 'publishpress-future/future-action-bulk-edit';\nconst delayToUnmountAfterSaving = 1000;\n\n// We create a copy of the WP inline set bulk function\nconst wpInlineSetBulk = inlineEditPost.setBulk;\nconst wpInlineEditRevert = inlineEditPost.revert;\n\nconst getPostId = (id) => {\n    // If id is a string or a number, return it directly\n    if (typeof id === 'string' || typeof id === 'number') {\n        return id;\n    }\n\n    // Otherwise, assume it's an HTML element and extract the post ID\n    const trElement = id.closest('tr');\n    const trId = trElement.id;\n    const postId = trId.split('-')[1];\n\n    return postId;\n}\n\n/**\n * We override the function with our own code so we can detect when\n * the inline edit row is displayed to recreate the React component.\n */\ninlineEditPost.setBulk = function (id) {\n    // Call the original WP edit function.\n    wpInlineSetBulk.apply(this, arguments);\n\n    if (select(storeName)) {\n        dispatch(storeName).setAction(postTypeDefaultConfig.expireType);\n        dispatch(storeName).setDate(postTypeDefaultConfig.defaultDate);\n        dispatch(storeName).setTaxonomy(postTypeDefaultConfig.taxonomy);\n        dispatch(storeName).setTerms(postTypeDefaultConfig.terms);\n        dispatch(storeName).setChangeAction('no-change');\n    } else {\n        createStore({\n            name: storeName,\n            defaultState: {\n                action: postTypeDefaultConfig.expireType,\n                date: defaultDate,\n                taxonomy: postTypeDefaultConfig.taxonomy,\n                terms: postTypeDefaultConfig.terms,\n                changeAction: 'no-change',\n            }\n        });\n    }\n\n    const saveButton = document.querySelector('#bulk_edit');\n    if (saveButton) {\n        saveButton.onclick = function() {\n            setTimeout(() => {\n                root.unmount();\n            }, delayToUnmountAfterSaving);\n        };\n    }\n\n    const container = document.getElementById(\"publishpress-future-bulk-edit\");\n    const root = createRoot(container);\n\n    root.render(\n        <FutureActionPanelBulkEdit\n            storeName={storeName}\n            postType={postType}\n            isNewPost={isNewPost}\n            actionsSelectOptions={actionsSelectOptions}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n            strings={strings}\n            taxonomyName={taxonomyName}\n            nonce={nonce}\n        />\n    );\n\n    inlineEditPost.revert = function () {\n        root.unmount();\n\n        // Call the original WP revert function.\n        wpInlineEditRevert.apply(this, arguments);\n    };\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const CheckboxControl = function (props) {\n    const { Fragment, useState } = wp.element;\n    const WPCheckboxControl = wp.components.CheckboxControl;\n\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { normalizeUnixTimeToMilliseconds } from \"../time\";\n\nexport const DateTimePicker = ({currentDate, onChange, is12Hour, startOfWeek}) => {\n    const WPDateTimePicker = wp.components.DateTimePicker;\n\n    if (typeof currentDate === 'number') {\n        currentDate = normalizeUnixTimeToMilliseconds(currentDate);\n    }\n\n    return (\n        <WPDateTimePicker\n            currentDate={currentDate}\n            onChange={onChange}\n            __nextRemoveHelpButton={true}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n        />\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleCalendarDatePicker } from './ToggleCalendarDatePicker';\n\nconst { PanelRow, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl, Container } = wp.components;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n\n    return (\n        <div className={panelClass}>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={contentPanelClass + ' future-action-full-width'}>\n                        <SelectControl\n                            label={props.strings.action}\n                            value={action}\n                            options={props.actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n                    </PanelRow>\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName}>\n                                        {`${props.strings.loading} (${taxonomyName})`}\n                                        <Spinner />\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                            || (!taxonomy && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName}>\n                                        <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <PanelRow>\n                                            <BaseControl label={taxonomyName}>\n                                                <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                    || (\n                                        <PanelRow className=\"future-action-full-width\">\n                                            <BaseControl>\n                                                <FormTokenField\n                                                    label={taxonomyName}\n                                                    value={selectedTerms}\n                                                    suggestions={termsListByNameKeys}\n                                                    onChange={handleTermsChange}\n                                                    maxSuggestions={10}\n                                                />\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={datePanelClass}>\n                        <ToggleCalendarDatePicker\n                            currentDate={date}\n                            onChangeDate={handleDateChange}\n                            onToggleCalendar={() => setCalendarIsVisible(!calendarIsVisible)}\n                            is12Hour={props.is12Hour}\n                            startOfWeek={props.startOfWeek}\n                            isExpanded={calendarIsVisible}\n                            strings={props.strings}\n                        />\n                    </PanelRow>\n\n                    <PanelRow>\n                        <div className=\"future-action-help-text\">\n                            <hr />\n\n                            <span className=\"dashicons dashicons-info\"></span> {HelpText}\n                        </div>\n                    </PanelRow>\n                </Fragment>\n            )}\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const { select } = wp.data;\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const data = {\n        enabled: getElementByName('future_action_enabled').value === '1',\n        action: getElementByName('future_action_action').value,\n        date: getElementByName('future_action_date').value,\n        terms: getElementByName('future_action_terms').value.split(',').map(term => parseInt(term)),\n        taxonomy: getElementByName('future_action_taxonomy').value,\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const { useSelect } = wp.data;\n\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nexport const NonceControl = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\n\nexport const PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.debug('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SelectControl = function (props) {\n    const { Fragment } = wp.element;\n    const { SelectControl } = wp.components;\n\n\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <SelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TextControl = function (props) {\n    const { Fragment } = wp.element;\n    const WPTextControl = wp.components.TextControl;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","export const ToggleArrowButton = function (props) {\n    const { Button } = wp.components;\n\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","import { ToggleArrowButton } from \"./ToggleArrowButton\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\nexport const ToggleCalendarDatePicker = (\n    {\n        isExpanded,\n        strings,\n        onToggleCalendar,\n        currentDate,\n        onChangeDate,\n        is12Hour,\n        startOfWeek\n    }\n) => {\n    const { Fragment, useEffect } = wp.element;\n\n    useEffect(() => {\n        // Move the element of the toggle button to between the time and date elements.\n        const toggleButtonElement = document.querySelector('.future-action-calendar-toggle');\n\n        if (! toggleButtonElement) {\n            return;\n        }\n\n        const dateTimeElement = toggleButtonElement.nextElementSibling;\n\n        if (! dateTimeElement) {\n            return;\n        }\n\n        const timeElement = dateTimeElement.querySelector('.components-datetime__time');\n\n        if (! timeElement) {\n            return;\n        }\n\n        const dateElement = timeElement.nextSibling;\n\n        if (! dateElement) {\n            return;\n        }\n\n        dateTimeElement.insertBefore(toggleButtonElement, dateElement)\n    });\n\n    return (\n        <Fragment>\n            <ToggleArrowButton\n                className=\"future-action-calendar-toggle\"\n                isExpanded={isExpanded}\n                iconExpanded=\"arrow-up-alt2\"\n                iconCollapsed=\"calendar\"\n                titleExpanded={strings.hideCalendar}\n                titleCollapsed={strings.showCalendar}\n                onClick={onToggleCalendar} />\n\n            <DateTimePicker\n                currentDate={currentDate}\n                onChange={onChangeDate}\n                __nextRemoveHelpButton={true}\n                is12Hour={is12Hour}\n                startOfWeek={startOfWeek}\n            />\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TokensControl = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { formatUnixTimeToTimestamp, getCurrentTimeAsTimestamp, normalizeUnixTimeToSeconds } from './time';\nimport { isNumber } from './utils';\nimport { register, createReduxStore } from '@wp/data';\n\nexport const createStore = (props) => {\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    // Make sure the date is a number, if it is a string with only numbers\n                    if (typeof action.date !== 'number' && isNumber(action.date)) {\n                        action.date = parseInt(action.date);\n                    }\n\n                    // If string, convert to unix time\n                    if (typeof action.date === 'string') {\n                        action.date = new Date(action.date).getTime();\n                    }\n\n                    // Make sure the time is always in seconds\n                    action.date = normalizeUnixTimeToSeconds(action.date);\n\n                    // Convert to formated string format, considering it is in the site's timezone\n                    action.date = formatUnixTimeToTimestamp(action.date);\n\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToSeconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length <= 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n\n/**\n * This function is used to determine if a value is a number, including strings.\n *\n * @param {*} value\n * @returns\n */\nexport const isNumber = (value) => {\n    return !isNaN(value);\n}\n","module.exports = publishpressFutureBulkEditConfig;","module.exports = window;","module.exports = wp.data;","module.exports = wp.element;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["storeName","wpInlineSetBulk","wpInlineEditRevert","ButtonsPanel","props","children","CheckboxControl","description","wp","element","Fragment","useState","WPCheckboxControl","components","checked","setChecked","unescapedDescription","className","dangerouslySetInnerHTML","__html","label","name","id","onChange","value","DateTimePicker","currentDate","is12Hour","startOfWeek","WPDateTimePicker","normalizeUnixTimeToMilliseconds","__nextRemoveHelpButton","PanelRow","SelectControl","FormTokenField","Spinner","BaseControl","Container","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","insertTerm","term","count","link","slug","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","postType","path","per_page","then","list","forEach","cat","strings","category","response","parseInt","context","taxonomyAttributes","rest_base","getCalendarIsVisibleFromStorage","localStorage","getItem","autoEnableAndHideCheckbox","isCleanNewPost","setItem","selectedTerms","length","compact","map","mapTermsListById","termsListByNameKeys","Object","keys","panelClass","contentPanelClass","datePanelClass","HelpText","string","href","target","parts","split","result","push","shift","before","after","key","replaceCurlyBracketsWithLink","timezoneSettingsHelp","type","enablePostExpiration","options","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","suggestions","mapTermsListByName","maxSuggestions","ToggleCalendarDatePicker","onChangeDate","onToggleCalendar","isExpanded","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","getEditedPostAttribute","title","panelTitle","icon","initialOpen","postTypeDefaultConfig","autoEnable","store","newAttribute","publishpress_future_action","entries","editPostAttribute","FutureActionPanelBulkEdit","changeAction","getChangeAction","setChangeAction","termsString","join","noChange","changeAdd","addOnly","changeOnly","removeOnly","futureActionUpdate","isNewPost","getElementByName","nonce","FutureActionPanelClassicEditor","Date","getTimezoneOffset","document","getElementsByName","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","applyFilters","hooks","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","updateTermsOptionsState","settingsTermsOptions","option","taxonomiesList","taxAttributes","catch","error","console","debug","termOptionsLabels","settingsRows","SettingRow","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","selected","noItemFoundMessage","noItemsfound","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","TokensControl","fieldTerm","isLoading","fieldTermDescription","fieldDefaultDateTimeOffset","TextControl","placeholder","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","SettingsFieldset","legend","SettingsTable","bodyChildren","PostTypesSettingsPanels","panels","postTypeSettings","valign","scope","htmlFor","SettingsForm","method","SettingsSection","SubmitButton","WPTextControl","ToggleArrowButton","Button","iconExpanded","iconCollapsed","titleExpanded","titleCollapsed","isSmall","onClick","toggleButtonElement","querySelector","dateTimeElement","nextElementSibling","timeElement","dateElement","nextSibling","insertBefore","hideCalendar","showCalendar","stringValue","setStringValue","TrueFalseControl","e","trueValue","jQuery","is","defaultChecked","trueLabel","falseValue","falseLabel","createStore","defaultState","getCurrentTimeAsTimestamp","createReduxStore","reducer","state","isNumber","getTime","normalizeUnixTimeToSeconds","formatUnixTimeToTimestamp","actions","selectors","register","getCurrentTimeInSeconds","unixTimestamp","getFullYear","getMonth","slice","getHours","getMinutes","getSeconds","timeIsInSeconds","formatTimestampToUnixTime","time","toString","getFieldByName","array","Array","isArray","values","debugLogFactory","config","message","isDebugEnabled","isGutenbergEnabled","body","classList","contains","postId","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","isNaN","module","exports","publishpressFutureBulkEditConfig","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","inlineEditPost","setBulk","revert","apply","this","arguments","dispatch","expireType","defaultDate","saveButton","onclick","setTimeout","root","unmount","container","getElementById","createRoot","render"],"sourceRoot":""}